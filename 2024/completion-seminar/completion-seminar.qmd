---
title: "Instance Space Analysis of Quantum Algorithms"
subtitle: "**Supervisors:** Prof. Kate Smith-Miles, Prof. Lloyd Hollenberg"
bibliography: references.bib
author: "Vivek Katial"
date: "2024-11-26"
format: 
  beamer: 
    aspectratio: 169
    cite-method: biblatex
    navigation: horizontal
    incremental: false
    slide-level: 2
    fontsize: 10pt
    theme: "metropolis"
    institute: "The University of Melbourne"
    citecolor: "blue"
    background-color: "white"
    classoption:
      - 'xcolor=dvipsnames'
    include-in-header: 
      - header.tex
---

# Agenda

1.  Introduction
2.  Quantum Approximate Optimisation Algorithm (QAOA)
3.  Instance Space Analysis
4.  Evolving Instances for QAOA
8.  Software for QAOA Parameter Initialisation
9.  Conclusion and Future Work

# Introduction

<!-- ## Acknowledgements -->

<!-- ::: {.columns} -->

<!-- ::: {.column width="50%"} -->

<!-- \centering -->

<!-- ![](images/kate.jpg){width=5    0%} -->

<!-- Prof. Kate Smith-Miles AO -->

<!-- ::: -->

<!-- ::: {.column width="50%"} -->

<!-- \centering -->

<!-- ![](images/lloyd.jpg){width=50%} -->

<!-- \small Prof. Lloyd Hollenberg -->

<!-- ::: -->

<!-- ::: -->

<!--   \vspace{2cm} -->

<!-- ::: {.columns} -->

<!-- ::: {.column width="45%"} -->

<!-- ![](images/optima.png) -->

<!-- ::: -->

<!-- ::: {.column width="45%"} -->

<!-- ![](images/ibm-quantum-hub.png) -->

<!-- ::: -->

<!-- ::: -->

## Why Quantum?

1.  Quantum Computers can *theoretically solve* can solve some problems much faster than classical computers
2.  What problems?
    -   **Shor's algorithm** for factoring large numbers - could break RSA encryption [@Shor1994]
    -   **Grovers Search** - Quadratic speedup over classical search [@Grover1996]
    -   **Simulation of physical systems** - Quantum Chemistry, Material Science
3.  What's the catch?
    -   Hardware is \textcolor{red}{\textbf{hard}} - assuming no errors we need several 1000s of qubits
    -   With current error rates - need millions of qubits + 100s of millions of gates
    -   **NISQ** - Noisy Intermediate-Scale Quantum (NISQ) devices - 50-100 qubits, noisy, error-prone

## How does Quantum Computing work?

:::: columns

::: {.column width="50%"}
![](images/superposition.pdf){width=100%}
:::

::: {.column width="50%"}

### Superposition

- Quantum bits (qubits) can exist in a superposition of states
- For $N=2$ qubits: $\ket{\psi} \in \mathbb{C}^2 \otimes \mathbb{C}^2 = \mathbb{C}^4$
- Represented by a vector in a complex vector space $\ket{\psi} \in [\mathbb{C}^2 ]^{\otimes n}$
- For $N=300$, there are $2^{300}$ possible states - more than the number of atoms in the universe!

:::

::::



<!-- ## Measurement -->

<!-- ::: columns -->
<!-- ::: {.column width="33%"} -->
<!-- ### Wave Function Collapse -->

<!-- When a quantum system is measured, its wavefunction collapses into a single state, and the system loses its superposition. -->
<!-- ::: -->

<!-- ::: {.column width="33%"} -->
<!-- ### Probabilistic Outcome -->

<!-- The outcome of a measurement is probabilistic, with the probability determined by the quantum state before the measurement. -->
<!-- ::: -->

<!-- ::: {.column width="33%"} -->
<!-- ### Disturbance -->

<!-- The act of measuring a quantum system inevitably disturbs the system, making it impossible to precisely determine the pre-measurement state. -->
<!-- ::: -->
<!-- ::: -->

## Noisy-intermediate Scale Quantum Era

::: columns
::: {.column width="50%"}
\vspace{0.5cm}

\small

-   Currently we’re in the NISQ-era of Quantum Computing
-   Need to design algorithms that can run on NISQ-devices

\vspace{0.5cm}

\small

Need to find algorithms that can:

1.  Can run on small (100-1000 qubit devices)
2.  Solve useful problems
3.  Shouldn’t require extensive error correction

\vspace{0.5cm}

\small

This has led to the development of **Variational Quantum Algorithms (VQAs)** [@Peruzzo2014], which are hybrid algorithms specifically designed for NISQ devices

:::

::: {.column width="50%"}
\centering
\includegraphics[height=0.8\textheight]{images/ibm-qc.png}
:::
:::

## Aims of the Thesis

\small

- VQAs are a promising class of quantum algorithms tailored for NISQ devices
- Two prominent examples:
    1. **Quantum Approximate Optimisation Algorithm (QAOA)** [@Farhi2014]
    2. **Variational Quantum Eigensolver (VQE)**
- QAOA in particular is a low-depth algorithm designed to solve optimisation problems
  - Many problems can be mapped to a Hamiltonian and solved using QAOA (e.g. MaxCut, TSP, Vehicle Routing, 3SAT)

## MaxCut Problem

Partition a graph $G = (V, E)$ into two sets $S$ and $V \setminus S$ such that the number of edges between the two sets is maximised. $$
\max_{\mathbf{s}} \sum_{(i,j) \in E} w_{ij} (1 - z_i z_j)
$$ where $z_i \in \{0, 1\}$ and $w_{ij} \in \mathbb{R}$ is the weight of edge $(i, j)$.

![An example of a six-node MaxCut problem](images/maxcut-example.pdf)

Solution is a binary string $\mathbf{s} = (s_1, s_2, \ldots, s_n)$ where $s_i \in \{0, 1\}$ and the optimal objective value is $C_{\max}$ where $C_{\max} = \sum_{(i,j) \in E} w_{ij}$ for the edges in our **maximum cut**.

## Solving MaxCut on a Quantum Computer

We map the MaxCut problem to a *Hamiltonian* for quantum optimisation.

::: columns
::: {.column width="42%"}
### Classical Formulation

\color{blue}{Objective:} $${\color{blue}\max_{\mathbf{s}} \sum_{(i,j) \in E} w_{ij} (1 - z_i z_j)}$$

\color{ForestGreen}{State Space:} $${\color{ForestGreen}\mathbf{s} \in \{0, 1\}^n}$$

\color{purple}{Solution:} $${\color{purple}\mathbf{s}^* = \underset{\mathbf{s}}{\text{argmax }} \sum_{(i,j) \in E} w_{ij} (1 - z_i z_j)}$$
:::

::: {.column width="16%" style="display: flex; align-items: center; justify-content: center;"}
\vspace{6em}

$\begin{matrix} \\ \xrightarrow{\quad \LARGE \text{ map }  \quad} \\ \phantom{\text{space}} \end{matrix}$
:::

::: {.column width="42%"}
### Quantum Formulation

\color{blue}{Objective:} $${\color{blue}H = \sum_{(i,j) \in E} w_{ij} (I - Z_i Z_j)}$$

\color{ForestGreen}{State Space:} $${\color{ForestGreen}|\psi\rangle \in \mathcal{H}_2^{\otimes n}}$$

\color{purple}{Solution:} $${\color{purple}|\psi_{\text{ground}}\rangle = \underset{|\psi\rangle}{\text{argmin }} \langle \psi | H | \psi \rangle}$$
:::
:::

::: {.notes}
- Our objective Hamiltonian (blue) represents cost function:
  - Built from Pauli-Z operators for each graph edge
  - Terms weighted by w_ij
  - (I - Z_i Z_j) encodes classical cost
- State space (green) is n-qubit Hilbert space
- Solution (purple) is ground state minimizing expectation value
:::

# Quantum Approximate Optimisation Algorithm (QAOA)
-   QAOA prepares a parameterised "trial" (ansatz) state of the form:
```{=tex}
\begin{align*}
    \ket{\psi(\theta)} &= \ket{\psi (\vec{\gamma}, \vec{\beta})} \\
                   &= \prod_{j=1}^{p} e^{-i\beta_j \hat{H}_B} e^{-i\gamma_j \hat{H}_P} \ket{+}^{\otimes n}
\end{align*}
```
-   Where $\hat{H}_P = \sum_{(i,j) \in E} w_{ij} (1 - \hat{Z}_i \hat{Z}_j)$ is the problem Hamiltonian and $\hat{H}_B = \sum_{i=1}^{n} \hat{X}_i$ is the mixing Hamiltonian. 
- The parameters $\vec{\gamma} = (\gamma_1, \dots, \gamma_p)$ and $\vec{\beta} = (\beta_1, \dots, \beta_p)$ are optimised to minimise the expectation value of the problem Hamiltonian.

::: {.notes}
- QAOA is hybrid quantum-classical
- Key components of ansatz state:
  1. Start with |+⟩^⊗n state (equal superposition)
  2. Alternate between:
     - Problem evolution e^{-iγH_P}
     - Mixing evolution e^{-iβH_B}
- H_P encodes optimization objective
- H_B = sum of X operators, explores solution space
:::



## Quantum Approximate Optimisation Algorithm (QAOA)

-   The QAOA Ansatz Energy is given by taking the expectation value of the problem Hamiltonian with respect to the trial state:

```{=tex}
\begin{align*}
F_p(\vec{\gamma}, \vec{\beta}) &= \bra{+}^{\otimes n} \left(\prod_{j=1}^p e^{-i\beta_j \hat{H}_B} e^{-i\gamma_j \hat{H}_P}\right)^\dagger \hat{H}_P \left( \prod_{j=1}^{p} e^{-i\beta_j \hat{H}_B} e^{-i\gamma_j \hat{H}_P} \right) \ket{+}^{\otimes n}  \\
          &= \langle \psi(\vec{\gamma}, \vec{\beta}) | \hat{H}_P | \psi(\vec{\gamma}, \vec{\beta}) \rangle
\end{align*}
```
-   The goal is to find the optimal parameters $\vec{\gamma}^*, \vec{\beta}^*$ that minimise the energy $F_p(\vec{\gamma}, \vec{\beta})$.

$$
(\vec{\gamma}^*, \vec{\beta}^*) = \arg \min_{\vec{\gamma}, \vec{\beta}} F_p(\vec{\gamma}, \vec{\beta}), \qquad \alpha = \frac{F_p(\vec{\gamma}^*, \vec{\beta}^*)}{C_{\max}}
$$

::: {.notes}
- F_p measures quality of current parameters
- Minimizing expectation value of problem Hamiltonian
- Think: quantum gradient descent in energy landscape
- α = F_p/C_max measures solution quality
- Parameters optimized classically
:::


## Quantum Approximate Optimisation Algorithm (QAOA)

::: {.columns .v-center-container}
::: {.column .pl-4 width="45%"}
### Key Design Decisions {.text-primary}

1.  **Circuit Depth** ($p$)
    -   Controls the expressivity of the ansatz
    -   As $p \rightarrow \infty$ QAOA can find the exact solution
2.  **Classical Optimiser**
    -   Gradient-free: Nelder-Mead, COBYLA
    -   Gradient-based: ADAM, SPSA
3.  **Initial Parameters** ($\vec{\gamma_0}, \vec{\beta_0}$)
    -   Various strategies for initialisation (e.g. TQA [@Sack2021], INTERP [@Zhou2020])\
:::

::: {.column .pr-4 width="55%"}
![QAOA Circuit Architecture](images/qaoa-schematic.pdf){.border .border-primary .rounded}
:::
:::

## Current State of QAOA Research {.center}

\vspace{0.3cm}

::: block
### Key Findings

-   Recent studies show optimal QAOA parameters for depth $p$ are \alert{transferable} across a small class of instances [@Brandao2018]
-   Optimal QAOA depth is \alert{instance-dependent} [@Shaydulin2021sym]
-   Algorithm performance heavily influenced by:
    -   Choice of classical optimiser [@pendas2022]
    -   Initial parameter selection [@Zhou2020],[@Lee2021],[@Shaydulin2021],[@Sureshbabu2024]
:::

::: block
### Current Limitations

-   Narrow focus on specific instance classes ($d-$regular graphs, random graphs, no weights)
-   Predominantly shallow depth circuits ($p \leq 3$) [@Shaydulin2021sym],[@Sureshbabu2024]
-   Limited understanding of instance feature impacts on QAOA performance and design decisions
-   Lack of standardised parameter initialisation frameworks [@abbas2023quantum]
:::

## Research Questions

\begin{tcolorbox}[
    colback=white,
    colframe=teal!70,
    boxrule=1pt,
    arc=3mm,
    title={\large\textbf{RQ1}},
    fonttitle=\color{white},
    top=3mm,
    bottom=3mm,
    left=3mm,
    right=3mm
]
\large
How can we generate diverse MaxCut instances beyond current QAOA research?
\end{tcolorbox}

\begin{tcolorbox}[
    colback=white,
    colframe=teal!70,
    boxrule=1pt,
    arc=3mm,
    title={\large\textbf{RQ2}},
    fonttitle=\color{white},
    top=3mm,
    bottom=3mm,
    left=3mm,
    right=3mm
]
\large
How do instance characteristics influence key QAOA design decisions?
\end{tcolorbox}

\begin{tcolorbox}[
    colback=white,
    colframe=teal!70,
    boxrule=1pt,
    arc=3mm,
    title={\large\textbf{RQ3}},
    fonttitle=\color{white},
    top=3mm,
    bottom=3mm,
    left=3mm,
    right=3mm
]
\large
Can we develop methods to automatically optimise QAOA parameters based on instance features?
\end{tcolorbox}

## QAOA Landscape Complexity & Instance Diversity

:::: {.columns}

::: {.column width="45%"}

\small
-   **Landscape Evolution with Depth:**
    -   Higher $p$ -- more complex optimisation landscape [@Bravyi2018]
    
-   **Weight Distribution Impact:**
    -   Cauchy distributions → more rugged landscapes [@Shaydulin2023]
    -   Weight scaling heuristics show promise
    -   Convergence to unweighted case under rescaling [@Sureshbabu2024]
    
-   **Practical Implications:**
    - More complex landscapes require more calls to the QPU, classical optimisers can falter \rightarrow more resource use!

:::

::: {.column width="55%"}

\vspace{1em}
![\tiny QAOA Landscape Variation Across MaxCut Instances (p=1, unweighted)](images/optimisation-landscape.png)

:::

::::

# Instance Space Analysis

:::: {.columns}

::: {.column width="40%" .content-center}
\small
- Based on the *No Free Lunch Theorem* [@Wolpert1997]: Algorithms have strengths and weaknesses
- Identify features that differentiate instances from each other and influence algorithm performance
- Identifies which algorithms are best suited for which instances - instead of reporting "on-average" performance
- ISA projects instances onto a 2D space to visualise the strengths and weaknesses of algorithms
:::

::: {.column width="60%"}
![Instance space analysis workflow](images/isa.pdf){height=75% fig-align="center"}
:::

::::

:::{.notes}
For each instance, we need meta-data. This includes:
- Instances (what instances show diversity of features), 
- Features (what features capture instance hardness)
- Algorithms show diversity
- Performance (how do I define perforfmance?)
- Changing each of these helps us answer various questions!
:::

## Our Approach

::: {.content-center}
![](images/thesis-flow.pdf){height=140%}
:::

## Instances $\mathcal{I} \subseteq \mathcal{P}$

:::: {.columns}

::: {.column width="50%"}
\begin{tcolorbox}[colback=blue!5,colframe=blue!40!black,title=IS I \& II: Network Structures]
\small
\begin{itemize}
\item Random
\item 3-regular
\item 4-regular
\item Geometric
\item Watts-Strogatz
\item Nearly complete bipartite
\end{itemize}
\end{tcolorbox}
:::

::: {.column width="50%"}
\begin{tcolorbox}[colback=green!5,colframe=green!40!black,title=IS III \& IV: Weight Distributions]
\small
\begin{itemize}
\item $\mathcal{U}[0,1]$ (Uniform)
\item $\mathcal{U}[-1,1]$ (Uniform)
\item $\text{Exp}(\lambda)$ (Exponential)
\item $\Gamma(k,\theta)$ (Gamma)
\item $\mathcal{N}(\mu,\sigma^2)$ (Normal)
\item $\text{LogNorm}(\mu,\sigma^2)$ (Lognormal)
\end{itemize}
\end{tcolorbox}
:::

::::

\begin{center}
\textcolor{gray}{\rule{0.8\textwidth}{0.4pt}}

\vspace{0.3cm}
{\large \textbf{Total Instance Classes:} $7 \times 6 = 42$}
\end{center}


## Features $\mathcal{F}$

:::: {.columns}
::: {.column width="33%"}
\begin{tcolorbox}[colback=blue!5,colframe=blue!40!black,title=Structural Features, fonttitle=\small]
\tiny
\begin{itemize}
\setlength{\itemsep}{0pt}
\item Number of Edges, Nodes
\item Bipartite Graph
\item Clique Number
\item Connected Graph
\item Density
\item Edge Connectivity
\item Max, Min Degree
\item Min. Dominating Set size
\item Regular Graph
\item Smallest Eigenvalue
\item Vertex Connectivity
\end{itemize}
\end{tcolorbox}


\begin{tcolorbox}[colback=blue!5,colframe=blue!40!black,title=Spectral Features, fonttitle=\small]
\tiny
\begin{itemize}
\setlength{\itemsep}{0pt}
\item Algebraic Connectivity
\item Laplacian Largest Eigenvalue
\item Ratio of Two Largest Laplacian Eigenvalues
\item Ratio of Two Smallest Laplacian Eigenvalues
\end{itemize}
\end{tcolorbox}

:::
::: {.column width="33%"}

\begin{tcolorbox}[colback=blue!5,colframe=blue!40!black,title=Cycle \& Path Features, fonttitle=\small]
\tiny
\begin{itemize}
\setlength{\itemsep}{0pt}
\item Acyclic Graph
\item Average Distance
\item Diameter
\item Eulerian Graph
\item Number of Components
\item Planar Graph
\item Radius
\end{itemize}
\end{tcolorbox}

\begin{tcolorbox}[colback=blue!5,colframe=blue!40!black,title=Literature, fonttitle=\small]
\tiny
\begin{itemize}
\setlength{\itemsep}{0pt}
\item Distance-Regular Graph
\item Group Size
\item Number of Cut Vertices
\item Number of Minimal Odd Cycles
\item Number of Orbits
\item Graph Entropy: $I(G) = \frac{1}{n} \sum_i |A_i| \log |A_i|$
\end{itemize}
\end{tcolorbox}

:::
::: {.column width="33%"}


\begin{tcolorbox}[colback=blue!5,colframe=green!40!black,title=Weight Features, fonttitle=\small]
\tiny
\begin{itemize}
\setlength{\itemsep}{0pt}
\item Mean, Median, Standard Deviation, Variance
\item Min/Max, IQE, Skewness, Kurtosis
\item Coef. of Variation
\item Weighted Avg Clustering
\item Weighted Avg Path Length
\item Weighted Diameter
\item Weighted Radius
\item Max Weighted Degree
\item Min Weighted Degree
\end{itemize}
\vspace{2em}

\textbf{\color{red}{Instance Space III and IV only}}

\end{tcolorbox}

\begin{center}
\textcolor{gray}{\rule{0.8\textwidth}{0.4pt}}
\\
{\small \textbf{48 Features}}
\end{center}
:::
::::


## Performance $\mathcal{Y}$
:::: {.columns}

::: {.column width="35%"}

\begin{itemize}
\item \textbf{Why?} Most algorithms achieve good approximation ratios
\item \textbf{Components:}
    \small
    \begin{itemize}
      \item Function evaluations
      \item Approximation ratio ($\alpha$)
    \end{itemize}
\item \textbf{Method to compute performance ($\kappa$):}
    \small
    \begin{enumerate}
    \setlength{\itemsep}{0.5pt}
    \item Find $\alpha_{\max}$ (best ratio)
    \item Set $\alpha_{\text{acceptable}} = 0.95 \alpha_{\max}$
    \item Count iterations ($\kappa$) to reach $\alpha_{\text{acceptable}}$
    \item If never reached, set penalty $\kappa = 10^5$
    \end{enumerate}
\end{itemize}
:::

::: {.column width="65%"}
\begin{figure}
\centering
\includegraphics[width=\textwidth]{images/approximation-ratio-by-each-initialisation-technique.png}
\caption{Approximation ratio $\alpha$ for various instances}
\end{figure}
:::


::::

## Algorithm Design Choices $\mathcal{A}$

:::: {.columns}
::: {.column width="70%"}
\textbf{Design Choices Across Independent Studies}
\begin{itemize}
\setlength{\itemsep}{4pt}
\item \textbf{IS I:} Layer Depth ($p$)
\begin{itemize}
\item How many layers are needed for different instances?
\item $p \in {2, 5, 10, 15, 20}$
\end{itemize}
\item \textbf{IS II:} Classical Optimiser Selection
\begin{itemize}
\item Which optimiser requires fewer calls to the quantum device?
\item Nelder-Mead, Conjugate Gradient, Powell, SLSQP, L-BFGS-B
\end{itemize}
\item \textbf{IS III/IV:} Initialisation Technique
\begin{itemize}
  \item Can we have faster convergence to optimal parameters?
  \item Random, TQA, INTERP, Constant, QIBPI, Three-Regular
\end{itemize}
\end{itemize}

:::
::: {.column width="30%"}
\begin{tcolorbox}[
colback=gray!10,
colframe=gray!50,
arc=0pt,
title={\textbf{Fixed meta-data}},
coltitle=black
]
\small
\begin{itemize}
\item Features
\item Instances
\item Performance Measure
\end{itemize}
\end{tcolorbox}
\vspace{0.3cm}
\begin{tikzpicture}
\node[draw=blue, rounded corners, fill=blue!10, text width=4cm, align=center] {
\small \textbf{All choices represent design decisions}
};
\end{tikzpicture}
:::
::::

\textcolor{gray}{\rule{\textwidth}{0.4pt}}
\small Each study isolates one key design choice while maintaining other parameters constant

# Instance Space III: Parameter Initialisation

## Quantum Instance-based Parameter Initialisation (QIBPI)

\tiny
\begin{algorithm}[H]
\DontPrintSemicolon
\SetAlgoLined
\caption{\small Generate Initial QAOA Parameters using QIBPI}
\KwIn{Number of nodes $N = 8$, Allowed Number of layers $L=15$}
\KwOut{Median optimal parameters $\vec{\gamma}$ and $\vec{\beta}$ for each class}
\SetKwFunction{FMain}{GenerateGraphInstances}
\SetKwFunction{Foptimise}{optimiseQAOAParameters}
\SetKwFunction{FMedian}{CalculateMedianParameters}
\SetKwProg{Fn}{Procedure}{:}{}
\Fn{\FMain{}}{
\For{$p \leftarrow 1$ \KwTo $L$}{
\ForEach{graph type $T$ in ${ T_1, \ldots, T_{42}}$}{
\For{$i \leftarrow 1$ \KwTo $100$}{
Generate graph instance $G_{i,T}$ with $N$ nodes;
\Foptimise{$G_{i, T}$, $p$};
}
\FMedian{$T_p$};
}
}
}
\SetKwProg{Fn}{Function}{:}{}
\Fn{\Foptimise{$G$, $p$}}{
\KwIn{Graph instance $G$}
\KwOut{Optimal parameters $(\vec{\gamma}_G, \vec{\beta}_G) = (\gamma_1, \ldots, \gamma_p), (\beta_1, \ldots, \beta_p)$}
Run QAOA on graph instance $G$ with random initialisation to find optimal parameters for depth $p$;
\KwRet{$(\vec{\gamma}_G, \vec{\beta}_G) = (\gamma_1, \ldots, \gamma_p), (\beta_1, \ldots, \beta_p)$};
}
\SetKwProg{Fn}{Function}{:}{}
\Fn{\FMedian{$T$}}{
\KwIn{Graph type $T$, Set of parameters ${\vec{\gamma}{i, p, T}}$, ${\vec{\beta}{i, p, T}}$}
\KwOut{Median parameters $\vec{\gamma}{\text{median}, T}$, $\vec{\beta}{\text{median}, T}$}
Calculate the \text{median} of the parameters $\gamma_{i, p, T}$ and $\beta_{i, p, T}$ for all instances of type $T$;
Store \text{median} parameters in a parameter class corresponding to $T$;
\KwRet{$\vec{\gamma}{\text{median}, T}$, $\vec{\beta}{\text{median}, T}$};
}
\end{algorithm}

## QAOA Initialisation Strategies ($p=15$) {.center}

:::: {.columns}

::: {.column width="33%"}

\small
\textbf{Random:}
\begin{itemize}
\setlength{\itemsep}{1pt}
\item $\gamma_i \sim \mathcal{U}(-\pi, \pi)$
\item $\beta_i \sim \mathcal{U}(-\pi/2, \pi/2)$
\end{itemize}

\textbf{TQA} [@Sack2021]:
\begin{itemize}
\setlength{\itemsep}{1pt}
\item $\gamma_i = i \cdot \Delta t / p$
\item $\beta_i = (1 - i/p) \cdot \Delta t$
\end{itemize}

\textbf{CONSTANT} [@Gaidai2023]:
\begin{itemize}
\setlength{\itemsep}{1pt}
\item $\gamma_i = 0.2$
\item $\beta_i = -0.2$
\end{itemize}
:::

::: {.column width="33%"}
\small
\textbf{FOURIER:} [@Zhou2020]
\begin{itemize}
\setlength{\itemsep}{1pt}
\item Frequency domain approach
\item $\gamma_i = \sum_k u_k \sin((k-\frac{1}{2})(i-\frac{1}{2})\frac{\pi}{p})$
\end{itemize}

\textbf{INTERP:} [@Zhou2020]
\begin{itemize}
\setlength{\itemsep}{1pt}
\item Parameter interpolation
\item $[\gamma_0^{(p+1)}]_i = \frac{i-1}{p} [\gamma_L^{(p)}]_{i-1}$
\end{itemize}
:::

::: {.column width="33%"}
\small
\textbf{QIBPI:}
\begin{itemize}
\setlength{\itemsep}{1pt}
\item Uses QIBPI pre-optimised parameters
\end{itemize}
\textbf{3-Regular:}
\begin{itemize}
\setlength{\itemsep}{1pt}
\item Uses 3-regular pre-optimised parameters
\end{itemize}
:::

::::

## Instance Space III: Projection Transformation

:::: {.columns}

::: {.column width="50%"}

The projection transformation is given by the matrix $\mathbf{Z}$:

\scriptsize
\begin{align*}
\mathbf{Z} =
\begin{pmatrix}
    z_1 \\
    z_2 
\end{pmatrix}
        &= 
 \left(\begin{array}{@{}c@{\hspace{2em}}c@{}}
        -0.5225 & 0.2301 \\
        -0.5939 & 0.7398 \\
        0.3977 & -0.2637 \\
        -0.1423 & -0.2023 \\
        -0.0091 & 0.5056 \\
        0.4226 & -0.019 \\
        0.0843 & 0.6528 \\
        -0.0033 & -0.0937 \\
        -0.2002 & -0.3513 \\
        0.3448 & -0.3839
    \end{array}\right)^{\intercal}
    \begin{pmatrix}
        \text{algebraic connectivity} \\
        \text{average distance} \\
        \text{clique number} \\
        \text{diameter} \\
        \text{maximum degree} \\
        \text{maximum weighted degree} \\
        \text{number of edges} \\
        \text{radius} \\
        \text{skewness weight} \\
        \text{weighted average clustering}
    \end{pmatrix} 
\end{align*}

Plotting 4,200 instances across $\mathbb{R}^2$.
:::

::: {.column width="50%"}

![Source Distribution](images/informs-ijjoc-isa/source_distribution.png){width=80%}

:::

::::

## Instance Space III - Features

![](images/informs-ijjoc-isa/feature_algebraic_connectivity_distribution.png){width=19%}
![](images/informs-ijjoc-isa/feature_average_distance_distribution.png){width=19%}
![](images/informs-ijjoc-isa/feature_clique_number_distribution.png){width=19%}
![](images/informs-ijjoc-isa/feature_diameter_distribution.png){width=19%}
![](images/informs-ijjoc-isa/feature_maximum_degree_distribution.png){width=19%}
![](images/informs-ijjoc-isa/feature_maximum_weighted_degree_distribution.png){width=19%}
![](images/informs-ijjoc-isa/feature_number_of_edges_distribution.png){width=19%}
![](images/informs-ijjoc-isa/feature_radius_distribution.png){width=19%}
![](images/informs-ijjoc-isa/feature_skewness_weight_distribution.png){width=19%}
![](images/informs-ijjoc-isa/feature_weighted_average_clustering_distribution.png){width=19%}


## Instance Space III - Algorithms

:::: {.columns}

::: {.column width="50%"}
![Best Algorithm](images/informs-ijjoc-isa/best_algorithm_distribution.png){width=80%}
:::

::: {.column width="50%"}
![Algorithm Distribution](images/informs-ijjoc-isa/svm_selection.png){width=80%}
:::

::::
## Instance Space III - Summary

\small
\begin{table}
\centering
\begin{tabular}{@{}lrrr@{}}
\toprule
Initialisation Strategy & $P_\text{good}$ (\%) & CV Accuracy (\%) & CV Precision (\%) \\
\midrule
CONSTANT & 3.20& 96.70& 33.3\\
INTERP & 0.10 & 99.90 & -- \\
QIBPI & 70.90& 75.80& 78.00\\
Three-Regular& 44.80& 78.50& 73.80\\
TQA & 11.10& 90.10& 87.50\\
\midrule
\textbf{Selector} & \textbf{77.90} & -- & \textbf{78.10}\\
\bottomrule
\end{tabular}
\caption{Performance metrics for various initialisation strategies}
\label{tab:initialization-strategies}
\end{table}


# Evolving Instances for QAOA

:::: {.columns}

::: {.column width="60%"}
![](images/ga-approach.pdf){height=90%}
:::

::: {.column width="40%"}
![Gaps in Instance Space](images/evolved_instances_targets_only.png){height=75%}

 
\footnotesize
We identify 360 target points in the instance space and evolve instances to reach these targets.

:::

::::

## Evolving Instances for QAOA

:::: {.columns}

::: {.column width="50%"}
\vspace{1cm}
![Fitness over Generations](images/fitness_over_generations.png){height=80%}
:::

::: {.column width="50%"}
![Gaps in Instance Space](images/evolved_instances.png){height=80%}

:::

::::
## Evolving Instances for QAOA

:::: {.columns}

::: {.column width="50%"}
![](images/source_distribution-evolved-vs-inst.png)
:::

::: {.column width="50%"}
![](images/svm_selection_evolved.png)
:::
::::

# Software for QAOA Parameter Initialisation

## Problem and Motivation

- Parameter initialisation significantly impacts QAOA's performance and convergence
- Current challenges:
  - Overwhelming number of initialisation techniques
  - Implementations are coupled with the various quantum libraries (e.g. Cirq, Qiskit, PyQuil)
  - Lack of standardization and comparison across different techniques
  
## QAOA-GamBet: A Fast API

Key Features:

- Consolidates multiple strategies (Random, QIBPI, QAOAKit, TQA, Constant)
- RESTful API for easy integration
- Modular and extensible 
- Built-in validation and error handling
- Automatic documentation generation

## FastAPI Workflow

![FastAPI Workflow](images/fast-api-parameter-initialisation.png){height=80%}

## Example Usage

:::: {.columns}

::: {.column width="50%"}
\small

### Request

```python
# Prepare the request data
data = {
    "adjacency_matrix": adjacency_matrix,
    "p": 2,
    "graph_type": "three_regular_graph",
    "weight_type": "uniform"
}

# Send a request to get optimal angles
response = requests.post(
    "http://localhost:5000/graph/QIBPI",
    json=data,
    auth=('username', 'password')
)
```
:::

::: {.column width="50%"}
\small

### Response

```python
{
  "beta": [0.1, 0.15, 0.2],
  "gamma": [0.3, 0.35, 0.4],
  "source": "QIBPI"
}
```
:::

::::

## Example

:::: {.columns}

::: {.column width="60%"}
\vspace{2em}
\begin{center}
\includegraphics[width=\textwidth]{images/docs-example.png}
\end{center}
:::

::: {.column width="40%"}

\vspace{1cm}
- Auto-generated documentation from docstrings
- Rendered using Swagger UI and redoc

\vspace{1em}
![](images/fast-api-qr-code.png){height=20%}
:::
::::


# Conclusion

- Key Contributions:
  - Expanded QAOA research scope with diverse test suite of MaxCut instances
  - Conducted Instance Space Analysis (ISA) to understand instance-feature impacts on QAOA design choices
  - Quantum Instance-based Parameter Initialisation (QIBPI)
  - FastAPI for QAOA Parameter Initialisation
- Instance Space Analysis:
  - Parameter transfer effective within instance classes, but not across
  - Gaps in instance space identified and applied instance evolution 

## Future Work

- Expand analysis scope
  - Extend to larger problem sizes
  - Include more weight distributions and network structures
  - Apply ISA to other quantum algorithms (VQE, F-VQE)
- Bridge theory-practice gap
  - Test on real quantum hardware (e.g., IBM's 128-qubit machine [@Sachdeva2024])
  - Create ML-based approaches leveraging experimental data

# Thank You - Questions? {.center background-color="white"}

- [Link to QAOA-GamBet](http://115.146.94.114:5000/redoc)
- [Link to ISA's](http://localhost:8501/Instance_Space_Analysis)

# References {.center}



